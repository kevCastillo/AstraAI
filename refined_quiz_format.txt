def render_quiz_interface():
    """Render the quiz interface with improved user experience"""
    if not st.session_state.document_loaded:
        st.warning("📚 Please upload a document first to start a quiz!")
        return

    # Quiz generation interface
    if not st.session_state.astra.quiz_active:
        st.write("### 📝 Generate a New Quiz")

        col1, col2, col3 = st.columns([3, 2, 1])
        with col1:
            num_questions = st.slider(
                "Number of questions",
                min_value=3,
                max_value=10,
                value=5,
                help="Choose how many questions you want in your quiz"
            )

        with col2:
            if st.button("Start Quiz", type="primary", use_container_width=True):
                with st.spinner("🎯 Generating quiz questions..."):
                    if st.session_state.astra.generate_quiz(num_questions):
                        st.success("Quiz generated successfully! Good luck! 🍀")
                    else:
                        st.error("Failed to generate quiz. Please try again.")
                        if st.session_state.astra.last_error:
                            st.error(f"Error: {st.session_state.astra.last_error}")

        with col3:
            if st.button("Help", use_container_width=True):
                st.info("""
                    📌 Quiz Tips:
                    - Questions are based on your uploaded document
                    - Each question has 4 options
                    - You can't change your answer after submission
                    - Your score is tracked throughout
                """)

    # Active quiz interface
    if st.session_state.astra.quiz_active:
        status = st.session_state.astra.get_quiz_status()

        # Progress bar and statistics
        st.progress(status['progress'] / status['total_questions'])

        cols = st.columns(4)
        with cols[0]:
            st.metric("Score", f"{status['score']}/{status['total_questions']}")
        with cols[1]:
            st.metric("Progress", f"{status['progress'] + 1}/{status['total_questions']}")
        with cols[2]:
            st.metric("Percentage", f"{status['percentage']}%")
        with cols[3]:
            if status.get('current_streak', 0) > 0:
                st.metric("Streak", f"🔥 {status['current_streak']}")

        # Current question
        question = st.session_state.astra.get_current_question()
        if question:
            # Question container
            with st.container():
                st.subheader(f"Question {status['progress'] + 1}")
                st.write(question['question'])

                # Options with improved formatting
                option_cols = st.columns(2)
                selected_option = None

                for i, (key, value) in enumerate(question['options'].items()):
                    with option_cols[i // 2]:
                        if st.button(
                                f"{key}) {value}",
                                key=f"option_{key}",
                                use_container_width=True
                        ):
                            selected_option = key

                # Handle answer submission
                if selected_option:
                    is_correct, explanation = st.session_state.astra.submit_answer(selected_option)

                    # Show result with animation
                    if is_correct:
                        st.success("✅ Correct! 🎉")
                    else:
                        st.error("❌ Incorrect!")

                    # Show explanation in a card-like container
                    with st.expander("📝 Explanation", expanded=True):
                        st.write(explanation)

                    # Continue button
                    if not st.session_state.astra.quiz_active:
                        # Quiz completed
                        st.balloons()
                        st.success("🎓 Quiz completed!")

                        # Final score card
                        col1, col2 = st.columns(2)
                        with col1:
                            st.metric("Final Score", f"{status['score']}/{status['total_questions']}")
                        with col2:
                            st.metric("Final Percentage", f"{status['percentage']}%")

                        # Offer to start new quiz
                        if st.button("Start New Quiz"):
                            st.rerun()
                    else:
                        # Continue to next question
                        if st.button("Next Question ➡️"):
                            st.rerun()

 def generate_quiz(self, num_questions: int = 5) -> bool:
        """
        Generate a quiz with improved formatting and error handling

        Args:
            num_questions (int): Number of questions to generate

        Returns:
            bool: True if quiz generation successful, False otherwise
        """
        if not self.context:
            self.last_error = "No document loaded for quiz generation"
            return False

        try:
            # Create a more structured prompt for reliable formatting
            prompt = f"""Generate {num_questions} multiple choice questions based on this text.
            Make questions that test understanding of key concepts.

            Text for quiz: {self.context[:2000]}...

            Format each question exactly like this example:

            1. Question text goes here?
            A) First option
            B) Second option
            C) Third option
            D) Fourth option
            CORRECT: B
            EXPLANATION: Explanation of why B is correct goes here.

            Generate {num_questions} questions in exactly this format, numbered from 1 to {num_questions}.
            """

            # Generate quiz content
            response = ollama.chat(
                model=self.model,
                messages=[{
                    "role": "system",
                    "content": "You are a quiz generator. Generate clear, focused questions with exactly four options (A, B, C, D). Provide the correct answer and explanation for each question."
                }, {
                    "role": "user",
                    "content": prompt
                }],
                options={
                    "temperature": 0.7,
                    "num_ctx": 2048,
                }
            )

            # Parse the response into structured quiz format
            quiz_questions = self._parse_quiz_response(response['message']['content'])

            if not quiz_questions:
                self.last_error = "Failed to generate valid quiz questions"
                return False

            self.current_quiz = quiz_questions
            self.quiz_active = True
            self.quiz_progress = 0
            self.quiz_score = 0
            self.total_questions = len(quiz_questions)
            return True

        except Exception as e:
            self.last_error = f"Quiz generation error: {str(e)}"
            self.console.print(f"[red]Error generating quiz: {str(e)}[/red]")
            return False

    def _parse_quiz_response(self, response_text: str) -> List[Dict[str, Any]]:
        """
        Parse quiz response into structured format

        Args:
            response_text (str): Raw quiz response from LLM

        Returns:
            List[Dict[str, Any]]: Structured quiz questions
        """
        try:
            questions = []
            current_question = None

            # Split response into lines and process
            lines = response_text.strip().split('\n')

            for line in lines:
                line = line.strip()
                if not line:
                    continue

                # New question starts with a number
                if line[0].isdigit() and '. ' in line:
                    if current_question:
                        questions.append(current_question)
                    current_question = {
                        'question': line.split('. ', 1)[1],
                        'options': {},
                        'correct': None,
                        'explanation': None
                    }

                # Option line
                elif line[0] in 'ABCD' and ') ' in line:
                    option, text = line.split(') ', 1)
                    if current_question:
                        current_question['options'][option] = text.strip()

                # Correct answer line
                elif line.startswith('CORRECT:'):
                    if current_question:
                        current_question['correct'] = line.split(':', 1)[1].strip()

                # Explanation line
                elif line.startswith('EXPLANATION:'):
                    if current_question:
                        current_question['explanation'] = line.split(':', 1)[1].strip()
                        questions.append(current_question)
                        current_question = None

            # Add last question if exists
            if current_question and current_question['explanation']:
                questions.append(current_question)

            # Validate questions
            valid_questions = []
            for q in questions:
                if self._validate_question(q):
                    valid_questions.append(q)

            return valid_questions

        except Exception as e:
            self.console.print(f"[red]Error parsing quiz response: {str(e)}[/red]")
            return []

    def _validate_question(self, question: Dict) -> bool:
        """
        Validate a single quiz question

        Args:
            question (Dict): Question dictionary to validate

        Returns:
            bool: True if question is valid, False otherwise
        """
        try:
            # Check required fields
            required_fields = ['question', 'options', 'correct', 'explanation']
            if not all(field in question for field in required_fields):
                return False

            # Validate options
            if not all(opt in question['options'] for opt in ['A', 'B', 'C', 'D']):
                return False

            # Validate correct answer
            if question['correct'] not in ['A', 'B', 'C', 'D']:
                return False

            # Validate content
            if not question['question'] or not question['explanation']:
                return False

            return True

        except Exception:
            return False

    def get_current_question(self) -> Optional[Dict[str, Any]]:
        """Get current quiz question with formatted output"""
        if not self.quiz_active or self.quiz_progress >= len(self.current_quiz):
            return None

        question = self.current_quiz[self.quiz_progress]
        return {
            'question': question['question'],
            'options': question['options'],
            'correct': question['correct'],
            'explanation': question['explanation']
        }

    def submit_answer(self, answer: str) -> Tuple[bool, str]:
        """Submit and validate quiz answer with improved feedback"""
        if not self.quiz_active:
            return False, "No quiz is active"

        current_question = self.get_current_question()
        if not current_question:
            return False, "No current question"

        answer = answer.upper()
        if answer not in ['A', 'B', 'C', 'D']:
            return False, "Invalid answer option"

        is_correct = answer == current_question['correct']
        if is_correct:
            self.quiz_score += 1

        self.quiz_progress += 1

        if self.quiz_progress >= self.total_questions:
            self.quiz_active = False

        feedback = current_question['explanation']
        if is_correct:
            feedback = f"✅ Correct! {feedback}"
        else:
            feedback = f"❌ Incorrect. The correct answer was {current_question['correct']}. {feedback}"

        return is_correct, feedback

    def get_quiz_status(self) -> Dict[str, Any]:
        """Get detailed quiz status with additional metrics"""
        return {
            'active': self.quiz_active,
            'progress': self.quiz_progress,
            'total_questions': self.total_questions,
            'score': self.quiz_score,
            'percentage': round((self.quiz_score / self.total_questions * 100) if self.total_questions > 0 else 0, 1),
            'remaining': self.total_questions - self.quiz_progress if self.quiz_active else 0,
            'current_streak': self._calculate_current_streak()
        }

    def _calculate_current_streak(self) -> int:
        """Calculate the current streak of correct answers"""
        streak = 0
        for i in range(self.quiz_progress - 1, -1, -1):
            if hasattr(self, '_answer_history') and len(self._answer_history) > i:
                if self._answer_history[i]:
                    streak += 1
                else:
                    break
            else:
                break
        return streak